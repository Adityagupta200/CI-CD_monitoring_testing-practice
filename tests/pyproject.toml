# pyproject.toml - Modern Python project configuration
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mlops-coverage-example"
version = "0.1.0"
description = "MLOps project demonstrating coverage thresholds"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    {name = "MLOps Team", email = "mlops@company.com"}
]
dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "pytest>=6.0.0",
    "pytest-cov>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--cov-branch",
    "--strict-markers",
    "--strict-config",
    "-ra",
    "-v"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "slow: Slow running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "setup.py",
    "*/venv/*",
    "*/virtualenv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/settings/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run
    "@(abc\\.)?abstractmethod",

    # Don't complain about type checking imports
    "if TYPE_CHECKING:",

    # MLOps specific exclusions
    "# pragma: no cover",
    "\\.\\.\\.\\.",  # Ellipsis in type stubs
    "class .*\\bProtocol\\:",  # Protocol classes
]

# Target coverage percentage
fail_under = 80

# Precision for coverage percentage reporting
precision = 2

# Show missing lines in coverage report  
show_missing = true

# Skip files with 100% coverage
skip_covered = false

# Skip empty files
skip_empty = true

# Sort by coverage percentage (descending)
sort = "-Cover"

[tool.coverage.html]
directory = "htmlcov"
title = "MLOps Project Coverage Report"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true
show_contexts = true

# Black code formatter configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checker configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false